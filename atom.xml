<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-22T03:37:09.834Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>俄罗斯悍匪</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>云原生安全概述</title>
    <link href="http://example.com/2022/03/19/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2022/03/19/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/</id>
    <published>2022-03-19T03:30:31.000Z</published>
    <updated>2022-03-22T03:37:09.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="云原生安全概述"><a href="#云原生安全概述" class="headerlink" title="云原生安全概述"></a>云原生安全概述</h1><p>本系列博客的内容均来源于对<strong>“云原生安全：攻防实现与体系构建”</strong>这本书籍的学习归纳。</p><h2 id="1-1-云原生的含义"><a href="#1-1-云原生的含义" class="headerlink" title="1.1 云原生的含义"></a>1.1 云原生的含义</h2><p>​    <strong>云计算的上半场</strong>基本已经结束，很多企业已经利用开源的或者商业的IaaS系统构建云计算平台，他们只是简单的将传统的物理主机、平台、或者应用转为虚拟化。只实现了<strong>“形”</strong>上的改变，还远远没有达到<strong>“神”</strong>上的变化。<strong>云计算的下半场</strong>，应该充分利用云计算的特性，解决业务在开发、运行整个生命周期中遇到的问题。</p><p>​    CNCF对云原生的解释为：“云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。<strong>云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API。</strong>这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统做出频繁和可预测的重大变更。</p><h2 id="1-2-云原生的特性"><a href="#1-2-云原生的特性" class="headerlink" title="1.2 云原生的特性"></a>1.2 云原生的特性</h2><h3 id="1-2-1-轻、快、不变的基础设施"><a href="#1-2-1-轻、快、不变的基础设施" class="headerlink" title="1.2.1  轻、快、不变的基础设施"></a>1.2.1  轻、快、不变的基础设施</h3><p>​        云原生环境中，支撑基础设施通常是容器技术。</p><p>​        <strong>轻、快：</strong>容器占用资源小，生命周期短，以秒或者分钟为基本单位。</p><p>​        <strong>不变：</strong>在实践中不会在容器中安装或者更新应用，而是更新为更为持久化的镜像。这种只更新镜像而不改变容器运行时的模式称为不变的基础设施。</p><h3 id="1-2-2-弹性服务编排"><a href="#1-2-2-弹性服务编排" class="headerlink" title="1.2.2 弹性服务编排"></a>1.2.2 弹性服务编排</h3><p>​        云原生的焦点是业务，业务的最核心之处是业务管理和控制。服务编排提供了强大的业务支撑能力，可以弹性的控制服务的位置、容量、版本，监控保证业务的可访问性。</p><h3 id="1-2-3-开发运营一体化"><a href="#1-2-3-开发运营一体化" class="headerlink" title="1.2.3 开发运营一体化"></a>1.2.3 开发运营一体化</h3><p>​        DevOps通过将软件开发和运营相结合，缩短软件开发的生命周期。DevOps的开发理念主要包括自动化构建、测试、持续集成和持续交付等等。</p><h3 id="1-2-4-微服务架构"><a href="#1-2-4-微服务架构" class="headerlink" title="1.2.4 微服务架构"></a>1.2.4 微服务架构</h3><p>​        将传统的单体应用的功能拆解成大量单独、细粒度的服务。通过应用编排组装，实现等价于传统单体应用的复杂功能。</p><h3 id="1-2-5-无服务模型"><a href="#1-2-5-无服务模型" class="headerlink" title="1.2.5 无服务模型"></a>1.2.5 无服务模型</h3><p>​    无服务是一种基于代码和计算任务执行的云计算抽象模型，与之相对的是基于服务器（虚拟机、容器）的计算模式。无服务聚焦在函数计算，隐藏了底层复杂的实现方式，使开发者能够聚焦业务本身。</p><h3 id="1-2-6-小结"><a href="#1-2-6-小结" class="headerlink" title="1.2.6 小结"></a>1.2.6 小结</h3><p>​        云原生就是以云的模式管理和部署资源，用户看到的不是一个虚拟主机，而是一个个业务单元，开发者只需要聚焦于业务本身。<strong>微服务的设计、无服务的功能是云原生理念的核心体现，容器、编排、服务网格是实现云原生的支撑技术。</strong></p><h2 id="1-3-云原生安全的含义"><a href="#1-3-云原生安全的含义" class="headerlink" title="1.3 云原生安全的含义"></a>1.3 云原生安全的含义</h2><p>​        云原生安全分为面向云原生环境的安全和具有云原生特征的安全。</p><h3 id="1-3-1-面向云原生环境的安全"><a href="#1-3-1-面向云原生环境的安全" class="headerlink" title="1.3.1 面向云原生环境的安全"></a>1.3.1 面向云原生环境的安全</h3><p>​        面向云原生环境的安全是为了保障云原生环境中的基础设施、编排系统和微服务系统的安全。这类安全机制，不一定具备云原生的特征，可以以传统的模式部署、硬件设备等资源来保护云原生环境。</p><p>​        针对云原生的内部安全机制主要以云原生形态的居多，如服务网格的安全通常使用旁挂串接的安全容器，微服务API安全通常使用API网关容器，容器都是云原生的部署方式，具有云原生的特征。</p><h3 id="1-3-2-具有云原生特征的安全"><a href="#1-3-2-具有云原生特征的安全" class="headerlink" title="1.3.2 具有云原生特征的安全"></a>1.3.2 具有云原生特征的安全</h3><p>​        借助于业界流行的云原生技术和平台，所提供的具有云原生特征的安全机制，能够提供比安全资源池性能更好、处置更灵活的安全能力。</p><h2 id="1-4-云原生安全体系"><a href="#1-4-云原生安全体系" class="headerlink" title="1.4 云原生安全体系"></a>1.4 云原生安全体系</h2><p>​    未来的云安全其实就是纯安全，未来的云计算无处不在，谈云安全问题，就是谈一个通用场景下的安全问题。</p><p>​    云原生安全演进如图所示：</p><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20220321111203133.png" alt="image-20220321111203133"></p><p>云原生发展会有三个阶段：</p><p>（1）安全赋能云原生体系，构建云原生的安全能力。当前云原生技术发展迅速，但相应的安全防护匮乏，基础的镜像安全、安全基线都没有成熟的方案。因此，需要研究如何将现有的安全策略，比如隔离、访问控制、入侵检测、应用安全等等应用到云原生环境，构建安全的云原生系统，是当前需要考虑的问题。</p><p>（2）安全产品具有云原生的新特性，该阶段需要研究的是将轻&#x2F;快&#x2F;不变的基础设施、弹性服务编排、开发运营一体化的云原生特性赋予到传统的安全产品上，通过软件定义的安全架构，构建原生安全架构，提供弹性、按需、云原生的安全能力。</p><p>（3）提高通用性，安全设备或者平台云原生化后，所提高的安全额能力，不仅适用于云原生、5G、边缘计算场景，还可以独立部署在大型电商等传统常见，最终成为无处不在的安全。</p><p><strong>根据云原生环境的构成，面向云原生环境的安全体系包含三个层面的安全机制。</strong></p><h3 id="1-4-1-容器安全"><a href="#1-4-1-容器安全" class="headerlink" title="1.4.1 容器安全"></a>1.4.1 容器安全</h3><p>​    容器环境是云计算的实现的一种方式，因此，容器层面的安全分为以下几部分。</p><p>​    （1）容器环境基础设施的安全性，比如主机上的安全配置是否会影响到其上运行的容器，主机上的安全漏洞和恶意进程是否会影响到容器，容器内的进程是否可以利用主机上的安全漏洞，等等。</p><p>​    （2）容器的镜像安全，包括镜像中的软件是否存在安全漏洞，镜像在构建过程中是否存在安全风险，镜像在传输过程中是否被恶意篡改。</p><p>​    （3）容器运行时安全，比如运行的容器间的隔离是否充分，容器间的通信是否是安全的，容器内的恶意程序是否会影响到主机或者其他容器，容器的资源使用情况是否安全等等。</p><p>​    （4）整个容器生态的安全性，比如Docker自身的安全性如何，Service Mesh&#x2F;Serverless对容器安全的影响，容器中的安全密钥的管理与传统环境有什么不同，容器化后的数据隐私保护与传统的数据隐私保护是否一致。</p><p>容器安全可以粗略的分为两个主要方面：一方面是容器云内部的安全，包括宿主机安全、虚拟化安全，容器（东西向）网络的安全，管理平台的安全以及数据安全等等；另一方面是容器云内外之间的网络安全，也就是通常讲的南北向网络安全。其中东西向指的是容器之间的安全，南北向指的是容器和外部之间的安全。</p><p><strong>云计算安全架构如图所示：</strong></p><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20220321114424421.png" alt="image-20220321114424421"></p><p><strong>容器云安全建设思路</strong></p><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20220321151924103.png" alt="image-20220321151924103"></p><h3 id="1-4-2-编排系统安全"><a href="#1-4-2-编排系统安全" class="headerlink" title="1.4.2 编排系统安全"></a>1.4.2 编排系统安全</h3><p>​        编排系统的安全指的主要是针对Kubernetes的安全。</p><h3 id="1-4-3-云原生应用安全"><a href="#1-4-3-云原生应用安全" class="headerlink" title="1.4.3 云原生应用安全"></a>1.4.3 云原生应用安全</h3><p>​        新型的微服务提醒中存在的安全风险</p><h2 id="1-5-云原生安全问题"><a href="#1-5-云原生安全问题" class="headerlink" title="1.5 云原生安全问题"></a>1.5 云原生安全问题</h2><h3 id="1-5-1-如何防护段生命周期的容器"><a href="#1-5-1-如何防护段生命周期的容器" class="headerlink" title="1.5.1 如何防护段生命周期的容器"></a>1.5.1 如何防护段生命周期的容器</h3><p>​    容器的生命周期啊分布呈现三种类型。</p><p>（1）虚拟机型：有一小部分容器被当成虚拟机使用，将本来放置于一个虚拟机中的程序集合部署到单个容器中，这些容器的生命周期和虚拟机相当。生命周期平均在83-333天左右。</p><p>（2）原生型：有一部分容器是以Docker的命令启动和管理的，这部分容器完成独立的功能，生命周期在10天左右</p><p>（3）编排型：还有大量的容器是由编排系统管理的，很多容器更具业务动态生成和销毁，这类容器的生命周期在1天以内。</p><p>​    攻击者关注的更多的是持久化的东西，比如代码、第三方库、镜像资产等等。</p><p>​    对于防守者来说，安装杀毒软件，对容器来说是一个相对不可行的技术，杀毒软件相对容器而言太重了。</p><p>​    因此如何保护短生命周期的容器是我们需要解决的问题之一。</p><h3 id="1-5-2-如何降低安全运营成本"><a href="#1-5-2-如何降低安全运营成本" class="headerlink" title="1.5.2 如何降低安全运营成本"></a>1.5.2 如何降低安全运营成本</h3><p>​        安全左移：将安全防护从传统运行时运营转向为开发侧</p><h3 id="1-5-3-DevSecOps"><a href="#1-5-3-DevSecOps" class="headerlink" title="1.5.3 DevSecOps"></a>1.5.3 DevSecOps</h3><p>​    <img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20220321230904215.png" alt="image-20220321230904215"></p><p>DevSecOps开发运营一体化安全，安全能力应该覆盖开发和运营闭环的每个环节。</p><h3 id="1-5-4-如何实现安全的云原生化"><a href="#1-5-4-如何实现安全的云原生化" class="headerlink" title="1.5.4 如何实现安全的云原生化"></a>1.5.4 如何实现安全的云原生化</h3><p>（1）安全架构具备编排能力</p><p>​        编排是指将各类资源根据业务需要进行动态控制和管理，安全架构可以借助编排系统实现动态化的管理和升级。</p><p>（2）容器和宿主机安全：安全特权容器</p><p>​    以安全容器的形式防护容器的安全，由于容器技术是操作系统的虚拟化，所以可以通过宿主机中的安全代理观察到容器中的进程、文化系统等消息。</p><p>（3）Sidecar安全容器</p><p>​        特权容器通常关心的是系统调用、网络流量，但是在云原生环境下，业务团队更加关心的是容器承载的业务的安全。这些安全主要是针对应用层的防护，针对应用层的防护，主要使用的是Sidecar模式的安全容器。</p><p>​    Sidecar容器本质上就是一种提供反向代理的容器，如图所示，该容器会劫持业务容器的流量，经过解析获得应用层的请求和响应，然后根据安全策略进行检测或防护。</p><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20220322112000290.png" alt="image-20220322112000290"></p><h2 id="1-6-云原生现状"><a href="#1-6-云原生现状" class="headerlink" title="1.6 云原生现状"></a>1.6 云原生现状</h2><h3 id="1-6-1-云原生新范式：Docker-Kubernetes"><a href="#1-6-1-云原生新范式：Docker-Kubernetes" class="headerlink" title="1.6.1 云原生新范式：Docker+Kubernetes"></a>1.6.1 云原生新范式：Docker+Kubernetes</h3><p>​    如图所示，Docker、Containerd和CRI-O是容器运行时的主流实现机制：</p><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20220322112538831.png" alt="image-20220322112538831"></p><p>​    如图所示，在编排工具上，Kubernetes占据了榜首。</p><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20220322112640748.png" alt="image-20220322112640748"></p><h3 id="1-6-2-镜像问题仍然突出"><a href="#1-6-2-镜像问题仍然突出" class="headerlink" title="1.6.2 镜像问题仍然突出"></a>1.6.2 镜像问题仍然突出</h3><p>​    Docker Hub上的官方惊醒，存在高危漏洞。主要问题来源于两方面：方面一：缺少安全团队对镜像的安全性进行检测。方面二：主要是镜像未及时更新安全补丁。</p><h3 id="1-6-3-安全配置规范执行和密钥凭证管理不理想"><a href="#1-6-3-安全配置规范执行和密钥凭证管理不理想" class="headerlink" title="1.6.3 安全配置规范执行和密钥凭证管理不理想"></a>1.6.3 安全配置规范执行和密钥凭证管理不理想</h3><p>​    云原生应用会大量存在应用与中间件、后端服务的交互，为了简便，很多开发者将访问凭证、密钥文件直接存放在代码中，或者将一些线上资源的访问品证设置为空或弱口令，导致攻击者很容易访问敏感数据的权限。</p><h2 id="1-7本章小结"><a href="#1-7本章小结" class="headerlink" title="1.7本章小结"></a>1.7本章小结</h2><p>​    通过本章的学习，了解云原生的含义，根据云原生和安全体系的关系和发展阶段，首次提出了原生安全的概念，然后介绍了云安全中的一些亟待解决的关键问题。</p><p><strong>欢迎各位关注个人公众号，一起讨论学习。个人博客地址： <a href="https://thenorth-sec.github.io/">https://thenorth-sec.github.io/</a></strong></p><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20220322113630820.png" alt="image-20220322113630820"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;云原生安全概述&quot;&gt;&lt;a href=&quot;#云原生安全概述&quot; class=&quot;headerlink&quot; title=&quot;云原生安全概述&quot;&gt;&lt;/a&gt;云原生安全概述&lt;/h1&gt;&lt;p&gt;本系列博客的内容均来源于对&lt;strong&gt;“云原生安全：攻防实现与体系构建”&lt;/strong&gt;这本书</summary>
      
    
    
    
    <category term="安全" scheme="http://example.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="云安全" scheme="http://example.com/tags/%E4%BA%91%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习</title>
    <link href="http://example.com/2022/03/18/javascript%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/03/18/javascript%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-03-18T15:04:36.000Z</published>
    <updated>2022-03-19T03:04:12.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><p>  <strong>(1) 变量的定义 const 和 let,  其中const 定义的是常量，不可以重复赋值，一般来说数据不可改变, let定义的变量是可以改变的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num =  <span class="number">123</span>;</span><br><span class="line"><span class="title function_">alert</span>(num);</span><br></pre></td></tr></table></figure><p><strong>(2) JS 中常用的变量类型：</strong></p><p>​    1) String</p><p>​    2) Boolean</p><p>​    3) Numbers</p><p>​    4) object: Array, Undefined, Null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num_1  = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">const</span> num_2  = <span class="number">1.1</span>; <span class="comment">// 在js中Number类型是不分整型和浮点型的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str_test = <span class="string">&quot;abc&quot;</span>; <span class="comment">// String 类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bool_test = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array_test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> undefined_test = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof num_1&quot;</span>, <span class="keyword">typeof</span> num_1);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof num_2&quot;</span>, <span class="keyword">typeof</span> num_2);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof str_test&quot;</span>, <span class="keyword">typeof</span> str_test);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof bool_test&quot;</span>, <span class="keyword">typeof</span> bool_test);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof array_test&quot;</span>, <span class="keyword">typeof</span> array_test);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof undefined_test&quot;</span>, <span class="keyword">typeof</span> undefined_test);</span><br></pre></td></tr></table></figure><p><strong>(3) 字符串的相关操作</strong></p><p>​    1) 字符串拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num_1 = &quot;</span> + num_1,<span class="string">&#x27;and num_2 = &#x27;</span> + num_2);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`num_1 = <span class="subst">$&#123;num_1&#125;</span>, num_2 = <span class="subst">$&#123;num_2&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str_test length = &quot;</span> + str_test.<span class="property">length</span>);  <span class="comment">// 属性没有括号，方法才有括号</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str_test toLocalUpperCase=&quot;</span>,str_test.<span class="title function_">toLocaleUpperCase</span>())</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str_test substring(0,2)&quot;</span>, str_test.<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> new_str = <span class="string">&quot;a b c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new_str split&quot;</span>,new_str.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>))</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h2><p>（1） 数组的相关操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> new_array = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new_array[1]&quot;</span>,new_array[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">new_array[<span class="number">2</span>] = <span class="string">&quot;d&quot;</span> <span class="comment">// const 定义的数组对象是可以修改的</span></span><br><span class="line"></span><br><span class="line">new_array.<span class="title function_">push</span>(<span class="string">&quot;e&quot;</span>) <span class="comment">// 在末尾添加元素</span></span><br><span class="line"></span><br><span class="line">new_array.<span class="title function_">unshift</span>(<span class="string">&quot;1&quot;</span>) <span class="comment">// 在头部添加元素</span></span><br><span class="line"></span><br><span class="line">new_array.<span class="title function_">pop</span>() <span class="comment">//去掉最尾的元素</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(new_array)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Array.isArray(new_array)&quot;</span>,<span class="title class_">Array</span>.<span class="title function_">isArray</span>(new_array))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new_array.indexOf(&#x27;a&#x27;)&quot;</span>,new_array.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="3-对象"><a href="#3-对象" class="headerlink" title="3.对象"></a>3.对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">hobbies</span>: [<span class="string">&#x27;music&#x27;</span>, <span class="string">&#x27;movies&#x27;</span>, <span class="string">&#x27;sports&#x27;</span>],</span><br><span class="line">    address :&#123;</span><br><span class="line">        <span class="attr">street</span>: <span class="string">&quot;50 main st&quot;</span>,</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&quot;Boston&quot;</span>,</span><br><span class="line">        <span class="attr">state</span>: <span class="string">&quot;NA&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person&#x27;</span>, person)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;persom.firstName&#x27;</span>, person[<span class="string">&#x27;firstName&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person.hobbies[0]&#x27;</span>, person.<span class="property">hobbies</span>[<span class="number">0</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person.address.street&#x27;</span>, person.<span class="property">address</span>.<span class="property">street</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>&#123;</span><br><span class="line">    firstName,</span><br><span class="line">    lastName,</span><br><span class="line">    <span class="attr">address</span>:</span><br><span class="line">        &#123;city&#125;</span><br><span class="line">&#125; = person; <span class="comment">// 直接抓取person对象中的属性值</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;firstName=&quot;</span>,firstName)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;city=&quot;</span>,city)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todos  = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="title class_">Name</span>: <span class="string">&quot;Jack&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="title class_">Name</span>: <span class="string">&quot;Tom&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;todos&quot;</span>,todos)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;todos[1].Name=&quot;</span>,todos[<span class="number">1</span>].<span class="property">Name</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换成json格式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todoJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(todos)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(todoJson)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-循环语句"><a href="#4-循环语句" class="headerlink" title="4. 循环语句"></a>4. 循环语句</h2><p>(1) for 相关语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i=<span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) while 相关语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(num &lt; <span class="number">6</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num = &quot;</span>, num);</span><br><span class="line">    num++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) for-each的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">Id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="title class_">Name</span>: <span class="string">&quot;Jack&quot;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="title class_">Id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="title class_">Name</span>: <span class="string">&quot;Tom&quot;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="title class_">Id</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="title class_">Name</span>: <span class="string">&quot;Jerry&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">todos.<span class="title function_">forEach</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">t</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;t.Name = &quot;</span>, t.<span class="property">Name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>(4) map的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map 返回一个数组</span></span><br><span class="line"><span class="keyword">const</span> t = todos.<span class="title function_">map</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">t</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="property">Id</span>;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;t = &quot;</span>, t)</span><br></pre></td></tr></table></figure><p>(5) filter 过滤器，过滤满足条件的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tName = todos.<span class="title function_">filter</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">t</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> t.<span class="property">Name</span>.<span class="property">length</span> &gt; <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="5-判断语句"><a href="#5-判断语句" class="headerlink" title="5.判断语句"></a>5.判断语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if 语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">1</span>)&#123; <span class="comment">// == 值判断值是否相等，不判断类型是否相等</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num = &quot;</span>, num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num == <span class="string">&#x27;1&#x27;</span>)&#123; <span class="comment">// == 值判断值是否相等，不判断类型是否相等</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num = &quot;</span>, num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num === <span class="number">1</span>)&#123; <span class="comment">// 不仅要判断值是否相等，类型也需要判断</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num = &quot;</span>, num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> score = <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">70</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成绩及格了&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt; <span class="number">70</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-逻辑运算"><a href="#6-逻辑运算" class="headerlink" title="6. 逻辑运算"></a>6. 逻辑运算</h2><p>注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false: undefined, 0, &#x27;&#x27;,null, false //这些值默认是false</span><br><span class="line">true:除了上述一般来说都是true</span><br></pre></td></tr></table></figure><p>（1）与 &amp;&amp;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> score = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;良&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">70</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 或 ||</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(age &lt; <span class="number">0</span> || age &gt; <span class="number">200</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;非法年龄&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;age=&quot;</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 三元运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xxx = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> color = xxx &gt; <span class="number">10</span> ? <span class="string">&#x27;red&#x27;</span> : <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;color = &quot;</span>,color)</span><br></pre></td></tr></table></figure><p>(4) switch 语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// switch 语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> color = <span class="string">&quot;red&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (color)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;red&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;blue&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未知&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-函数"><a href="#7-函数" class="headerlink" title="7. 函数"></a>7. 函数</h2><p>（1）普通函数</p><p>注意： 普通函数的首字母是不可以大写的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;function 函数演示&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数第一个字母是不可以大写的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num_1 = <span class="number">0</span>, num_2 = <span class="number">0</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num_1 + num_2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res = &quot;</span>, res)</span><br></pre></td></tr></table></figure><p>(2) 箭头函数（相当于匿名函数）</p><p><strong>注意：</strong> 匿名函数必须有变量接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="comment">// 上述函数并不能改造为箭头函数，去掉函数名add才可以</span></span><br><span class="line"><span class="comment">// 匿名函数必须要有变量进行接收</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">kniferes</span> = (<span class="params">num_1, num_2</span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> num_1+num_2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addres = <span class="title function_">kniferes</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(addres)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果箭头函数只有一行，且不是return指令是可以这样编写的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">singleline</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">singleline</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取代return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addline</span> = (<span class="params">num_1, num_2</span>) =&gt; num_1 + num_2</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addline(1,2) = &quot;</span>, <span class="title function_">addline</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有一个形参，无初始值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test</span> = num_1 =&gt; num_1 + <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test=&quot;</span>,<span class="title function_">test</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="8-对象"><a href="#8-对象" class="headerlink" title="8. 对象"></a>8. 对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面向对象的基础演示, 只要带上&#123;&#125;,就是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> book_1 = &#123;</span><br><span class="line">    title : <span class="string">&quot;明朝那些事&quot;</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="string">&quot;朱元璋&quot;</span>,</span><br><span class="line">    <span class="attr">year</span>: <span class="string">&quot;2013&quot;</span>,</span><br><span class="line">    <span class="attr">getSummary</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.author&#125;</span> 在 <span class="subst">$&#123;<span class="variable language_">this</span>.year&#125;</span> 写了 <span class="subst">$&#123;<span class="variable language_">this</span>.title&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book_1.<span class="title function_">getSummary</span>())</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Object.Keys(book_1)&quot;</span>, <span class="title class_">Object</span>.<span class="title function_">keys</span>(book_1))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Object.Values(book_1)&quot;</span>, <span class="title class_">Object</span>.<span class="title function_">values</span>(book_1))</span><br></pre></td></tr></table></figure><h2 id="9-构造函数"><a href="#9-构造函数" class="headerlink" title="9. 构造函数"></a>9. 构造函数</h2><p>（1）构造函数，相当于其他语言中类的概念</p><p>存在的问题： 比如构造函数中存在方法，这个时候会在所有的对象中创建该方法。造成了内存的浪费。</p><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20211117213432595.png" alt="image-20211117213432595"></p><p>因此，JS为了解决上述问题，推出了原型链的概念</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    注意：类是对象的模板，对象是类的实例</span></span><br><span class="line"><span class="comment">    但是ES6之前，js是不存在类的概念的，js不是基于类，而是通过构造函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造函数</span></span><br><span class="line"><span class="comment">    a. 构造函数的首字母必须大写，用来区分于普通函数</span></span><br><span class="line"><span class="comment">    b. 内部使用的this对象，来指向要生成的实例对象</span></span><br><span class="line"><span class="comment">    c. 使用New来生成对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Book</span>(<span class="params">title, author, year</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = title;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">author</span> = author;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">year</span> = year;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getSummary</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.author&#125;</span> 在 <span class="subst">$&#123;<span class="variable language_">this</span>.year&#125;</span> 写了 <span class="subst">$&#123;<span class="variable language_">this</span>.title&#125;</span>这篇文章`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">book_1 = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;明朝那些事&quot;</span>, <span class="string">&quot;朱元璋&quot;</span>,<span class="string">&quot;2020&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book_1.<span class="title function_">getSummary</span>())</span><br></pre></td></tr></table></figure><p>（2）原型链</p><p>通过原型链创建构造函数的方法，只有对象使用时，才会创建。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    原型链</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Book</span>(<span class="params">title, author, year</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = title;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">author</span> = author;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">year</span> = year</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Book</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSummary</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.author&#125;</span> 在 <span class="subst">$&#123;<span class="variable language_">this</span>.year&#125;</span> 写了 <span class="subst">$&#123;<span class="variable language_">this</span>.title&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;h2 id=&quot;1-变量&quot;&gt;&lt;a href=&quot;#1-变量&quot; class=&quot;head</summary>
      
    
    
    
    <category term="开发" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="前端学习" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>css学习</title>
    <link href="http://example.com/2022/03/18/css%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/03/18/css%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-03-18T15:04:36.000Z</published>
    <updated>2022-03-19T03:03:57.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-相关知识点"><a href="#CSS-相关知识点" class="headerlink" title="CSS 相关知识点"></a>CSS 相关知识点</h1><h2 id="1-样式的优先级"><a href="#1-样式的优先级" class="headerlink" title="1. 样式的优先级"></a>1. 样式的优先级</h2><p>行内样式 &gt; 内部样式 、 外部样式</p><p> 其中针对内部样式和外部样式采用的是就近原则，谁距离标签比较近，就使用睡得样式表。</p><h2 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2.选择器"></a>2.选择器</h2><h3 id="2-1-基本选择器"><a href="#2-1-基本选择器" class="headerlink" title="2.1 基本选择器"></a>2.1 基本选择器</h3><p>为了获取页面的的元素</p><p>（1）标签选择器</p><p>（2）类选择器</p><p>（3）id选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;myh1&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;name&#x27;</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.myh1</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#name</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 选择器的优先级顺序：</p><p>​    id选择器 &gt; class 选择器 &gt; 标签选择器</p><h3 id="2-2-层次选择器"><a href="#2-2-层次选择器" class="headerlink" title="2.2 层次选择器"></a>2.2 层次选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>p5<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>p6<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、后代选择器</p><p>所有的后代</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20211127164240275.png" alt="image-20211127164240275"></p><p>2、子选择器</p><p>只有最近的子代</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20211127164222041.png" alt="image-20211127164222041"></p><p>3、相邻兄弟选择器</p><p>只有一个，相邻向下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>p5<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>p6<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.active</span> + <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20211127164948302.png" alt="image-20211127164948302"></p><p>4.通用选择器</p><p>当前选中元素的向下的所有兄弟元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.active</span> ~ <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-结构伪类选择器"><a href="#2-3-结构伪类选择器" class="headerlink" title="2.3 结构伪类选择器"></a>2.3 结构伪类选择器</h3><p>我觉得意义不大</p><h3 id="2-4-属性选择器"><a href="#2-4-属性选择器" class="headerlink" title="2.4 属性选择器"></a>2.4 属性选择器</h3><p>属性选择器可以根据元素的属性或者属性值来选择元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active node&quot;</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active node&quot;</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>p5<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>p6<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 不加~就是完全匹配 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> <span class="selector-tag">p</span><span class="selector-attr">[class~=<span class="string">&quot;active&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-样式"><a href="#3-样式" class="headerlink" title="3.样式"></a>3.样式</h2><h3 id="3-1-字体样式"><a href="#3-1-字体样式" class="headerlink" title="3.1 字体样式"></a>3.1 字体样式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">font-family: 字体</span><br><span class="line">font-size: 字体大小</span><br><span class="line">font-weight: 字体粗细</span><br><span class="line">color: 字体颜色</span><br></pre></td></tr></table></figure><h3 id="3-2-文本样式"><a href="#3-2-文本样式" class="headerlink" title="3.2 文本样式"></a>3.2 文本样式</h3><ol><li><p>颜色</p></li><li><p>文本对齐方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align: center;</span><br></pre></td></tr></table></figure></li><li><p>首行缩进</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* em代表缩进一个字 */</span><br><span class="line">text-indent: 2em; </span><br></pre></td></tr></table></figure></li><li><p>行高</p><p>行高和块的高度一致时，就可以保证文本上下居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20211128142513484.png" alt="image-20211128142513484"></p></li><li><p>下划线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: underline;</span><br></pre></td></tr></table></figure></li><li><p>文本图片水平对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;../../public/favicon<span class="selector-class">.ico</span>&quot; class=&quot;favicon&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> class=&quot;spantext&quot;&gt;<span class="number">111111111111111111111</span>&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/* 逗号左边的参数是参照物 */</span></span><br><span class="line">    <span class="selector-class">.favivon</span>,spantext&#123;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-3-文本阴影和超链接伪类"><a href="#3-3-文本阴影和超链接伪类" class="headerlink" title="3.3 文本阴影和超链接伪类"></a>3.3 文本阴影和超链接伪类</h3><h4 id="3-3-1-超链接的相关伪类"><a href="#3-3-1-超链接的相关伪类" class="headerlink" title="3.3.1 超链接的相关伪类"></a>3.3.1 超链接的相关伪类</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="comment">/* 鼠标在超链接上时的相关样式 */</span></span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 鼠标点击超链接时的相关样式 */</span></span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: bisque;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-文本阴影"><a href="#3-3-2-文本阴影" class="headerlink" title="3.3.2 文本阴影"></a>3.3.2 文本阴影</h4><h2 id="3-4-列表"><a href="#3-4-列表" class="headerlink" title="3.4 列表"></a>3.4 列表</h2><h4 id="3-4-1-相关样式"><a href="#3-4-1-相关样式" class="headerlink" title="3.4.1 相关样式"></a>3.4.1 相关样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">列表开头的相关样式：</span></span><br><span class="line"><span class="comment">none 去掉原点</span></span><br><span class="line"><span class="comment">circle 空心圆</span></span><br><span class="line"><span class="comment">decimal 数字</span></span><br><span class="line"><span class="comment">square 正方形</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">line-style: none;</span><br></pre></td></tr></table></figure><h3 id="3-5-背景"><a href="#3-5-背景" class="headerlink" title="3.5 背景"></a>3.5 背景</h3><h4 id="3-5-1-背景颜色"><a href="#3-5-1-背景颜色" class="headerlink" title="3.5.1 背景颜色"></a>3.5.1 背景颜色</h4><h4 id="3-5-2-背景图片"><a href="#3-5-2-背景图片" class="headerlink" title="3.5.2 背景图片"></a>3.5.2 背景图片</h4><h2 id="4-盒子模型"><a href="#4-盒子模型" class="headerlink" title="4.盒子模型"></a>4.盒子模型</h2><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20211128155442979.png" alt="image-20211128155442979"></p><p>margin: 外边框</p><p>padding: 内边框</p><p>border: 边框</p><h3 id="4-2-边框"><a href="#4-2-边框" class="headerlink" title="4.2 边框"></a>4.2 边框</h3><ol><li><p>边框的粗细</p></li><li><p>边框的样式</p></li><li><p>边框的颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-3-外边框"><a href="#4-3-外边框" class="headerlink" title="4.3 外边框"></a>4.3 外边框</h3><p>外边框水平居中</p><p>注意：如果margin: 0 auto; 未生效</p><p>在body中将text-align属性设置未center就行。</p><p><img src="https://gitee.com/the_north/imagebed/raw/master/image/image-20211128224341019.png" alt="image-20211128224341019"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 水平居中  首先外面是一个块元素，块元素外面有长度限制*/</span></span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span> auto; </span><br><span class="line"><span class="comment">/* 上边距20px,下边距30px,左边距10px,右边距40px */</span></span><br><span class="line"><span class="attribute">margin</span>:<span class="number">20px</span> <span class="number">30px</span> <span class="number">10px</span> <span class="number">40px</span>;</span><br></pre></td></tr></table></figure><h3 id="4-4-圆角边框"><a href="#4-4-圆角边框" class="headerlink" title="4.4 圆角边框"></a>4.4 圆角边框</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 左上 右上 右下 左下 */</span></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br></pre></td></tr></table></figure><h3 id="4-5-阴影"><a href="#4-5-阴影" class="headerlink" title="4.5 阴影"></a>4.5 阴影</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow: ;</span><br></pre></td></tr></table></figure><h2 id="5-浮动"><a href="#5-浮动" class="headerlink" title="5. 浮动"></a>5. 浮动</h2><h3 id="5-1-行内元素"><a href="#5-1-行内元素" class="headerlink" title="5.1 行内元素"></a>5.1 行内元素</h3><p>行内元素：　　</p><ul><li>与其他行内元素并排</li><li>不能设置宽高，默认的宽度就是文字的宽度</li></ul><h3 id="5-2-块级元素"><a href="#5-2-块级元素" class="headerlink" title="5.2 块级元素"></a>5.2 块级元素</h3><p>块级元素：</p><ul><li>霸占一行，不能与其他任何元素并列。</li><li>能接受宽高，如果不设置宽度，那么宽度将默认变为父级的100%。</li></ul><h4 id="5-2-1块级元素和行内元素的分类："><a href="#5-2-1块级元素和行内元素的分类：" class="headerlink" title="5.2.1块级元素和行内元素的分类："></a>5.2.1块级元素和行内元素的分类：</h4><p>　　在HTML的角度来讲，标签分为：</p><p>　　　　文本级标签：p , span , a , b , i , u , em</p><p>　　　　容器级标签：div , h系列 , li , dt ,dd</p><p>　　　　p：里面只能放文字和图片和表单元素，p里面不能放h和ul，也不能放p。</p><p>　　从CSS的角度讲，CSS的分类和上面的很像，就p不一样：</p><p>　　　　行内元素：除了p之外，所有的文本级标签，都是行内元素。p是个文本级标签，但是是个块级元素。</p><p>　　　　块级元素：所有的容器级标签，都是块级元素，以及p标签。</p><h4 id="5-2-2块级元素和行内元素的相互转换："><a href="#5-2-2块级元素和行内元素的相互转换：" class="headerlink" title="5.2.2块级元素和行内元素的相互转换："></a>5.2.2块级元素和行内元素的相互转换：</h4><p>　　我们可以通过display属性将块级元素(比如div)和行内元素进行相互转换。</p><p>　　display：inline;</p><p>　　那么这个标签将变为行内元素，即：</p><p>　　　　1，此时这个div将不能设置宽度和高度了。</p><p>　　　　2，此时这个div可以和其他行内元素并排了。</p><p>　　同样的到了我们也可以用display将行内元素(比如span)转行成块级元素。</p><p>　　display：block；</p><p>　　那么这个span标签将变为块级标签，即：</p><p>　　　　1，此时这个span能够设置宽度，高度。</p><p>　　　　2，此时这个span必须独占一行，其他元素无法与之并排。</p><p>　　　　3，如果不设置宽度，将占满父级。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS-相关知识点&quot;&gt;&lt;a href=&quot;#CSS-相关知识点&quot; class=&quot;headerlink&quot; title=&quot;CSS 相关知识点&quot;&gt;&lt;/a&gt;CSS 相关知识点&lt;/h1&gt;&lt;h2 id=&quot;1-样式的优先级&quot;&gt;&lt;a href=&quot;#1-样式的优先级&quot; class=&quot;</summary>
      
    
    
    
    <category term="开发" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="前端学习" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
